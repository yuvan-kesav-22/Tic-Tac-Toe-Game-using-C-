#include <iostream>
#include <cstring>
#include <algorithm>
#include <ctime>

using namespace std;

// Check if three positions on the board have the same non-zero value.
#define checkTripleMatch(pos1, pos2, pos3) ((board[pos1] == board[pos2]) && (board[pos2] == board[pos3]) && (board[pos1] != 0)) 
#define numberToSymbol(x) ((x > 0) ? (x == 1) ? 'X' : 'O' : ' ') // Convert the board value to 'X', 'O', or ' '.

int findWinner(int board[9]) {
    // Determine the winner of the game, or return 0 if there is no winner.
    int winner = 0;
    for (int i = 0; i < 3; i++) {
        if (checkTripleMatch(3 * i, 3 * i + 1, 3 * i + 2)) { // Check rows.
            winner = board[3 * i];
            break;
        } else if (checkTripleMatch(i, i + 3, i + 6)) { // Check columns.
            winner = board[i];
            break;
        } else if (checkTripleMatch(2 * i, 4, 8 - 2 * i) && (i < 2)) { // Check diagonals.
            winner = board[4];
            break;
        }
    }
    return winner;
}

bool isGameOver(int board[9]) {
    // Check if the game is over and announce the result.
    int winner = findWinner(board);
    if (winner > 0) {
        cout << numberToSymbol(winner) << " wins!" << endl;
        return true;
    }
    for (int i = 0; i < 9; i++) {
        if (board[i] == 0) return false;
    }
    cout << "It's a tie!" << endl;
    return true;
}

int canWinNextMove(int board[9], int player) {
    // Check if a given player can win with their next move.
    for (int i = 0; i < 9; i++) {
        int tempBoard[9];
        memcpy(tempBoard, board, sizeof(tempBoard));
        if (board[i] > 0) continue;
        tempBoard[i] = player;
        if (findWinner(tempBoard) == player) return i;
    }
    return -1;
}

int handleEdgeCase(int board[9]) {
    // Handle special cases where the usual strategy doesn't work well.
    int specialCases[2][9] = {{1, 0, 0, 0, 2, 0, 0, 0, 1}, {0, 1, 0, 1, 2, 0, 0, 0, 0}}; // Problematic board configurations.
    int solutions[2][4] = {{3, 3, 3, 3}, {2, 8, 6, 0}};
    int rotatedBoard[9] = {6, 3, 0, 7, 4, 1, 8, 5, 2};
    int currentBoard[9];
    int tempBoard[9];
    for (int i = 0; i < 9; i++) {
        currentBoard[i] = board[i];
    }
    for (int caseIndex = 0; caseIndex < 2; caseIndex++) {
        for (int rotation = 0; rotation < 4; rotation++) {
            for (int i = 0; i < 9; i++)
                tempBoard[i] = currentBoard[i];

            int matchCount = 0;
            for (int pos = 0; pos < 9; pos++) {
                currentBoard[pos] = tempBoard[rotatedBoard[pos]];
            }

            for (int i = 0; i < 9; i++) {
                if (currentBoard[i] == specialCases[caseIndex][i]) matchCount++;
                else break;
            }
            if (matchCount == 9) return solutions[caseIndex][rotation];
        }
    }
    return -1;
}

int getRandomAvailableSpace(int board[9], int positions[4]) {
    // Get a random empty corner or side.
    bool isSpaceAvailable = false;
    int selectedPosition;
    for (int i = 0; i < 4; i++) {
        if (board[positions[i]] == 0) {
            isSpaceAvailable = true;
            break;
        }
    }
    if (isSpaceAvailable) {
        do {
            selectedPosition = rand() % 4;
        } while (board[positions[selectedPosition]] != 0);
        return positions[selectedPosition];
    }
    return -1;
}

void printBoard(int board[9]) {
    // Print the board to the console.
    for (int row = 0; row < 3; row++) {
        for (int col = 0; col < 3; col++) {
            cout << numberToSymbol(board[3 * row + col]) << ((col < 2) ? '|' : '\n');
        }
        cout << ((row < 2) ? "-----\n" : "\n");
    }
}

int main() {
    int board[9] = {0, 0, 0, 0, 0, 0, 0, 0, 0}; // Start with an empty board.
    int possibleWinningMove;
    int playerMove;
    bool invalidMove;
    string inputMove;
    srand(static_cast<unsigned>(time(0)));
    int cornerPositions[4] = {0, 2, 6, 8};
    int sidePositions[4] = {1, 3, 5, 7};

    cout << "1|2|3\n-----\n4|5|6\n-----\n7|8|9\n\n";

    while (true) {
        // Player X's turn.
        do {
            cout << "X: ";
            getline(cin, inputMove);
            playerMove = inputMove[0] - '1';
            if (playerMove > 8 || playerMove < 0 || board[playerMove] != 0) {
                cout << "Invalid input" << endl;
                invalidMove = true;
            } else {
                board[playerMove] = 1;
                invalidMove = false;
                cout << endl;
            }
        } while (invalidMove);

        // Check if the game is over.
        if (isGameOver(board)) {
            printBoard(board);
            break;
        }

        // Player O's turn.
        bool moveMade = false;
        for (int player = 2; player > 0; player--) {
            possibleWinningMove = canWinNextMove(board, player);
            if (possibleWinningMove != -1) {
                board[possibleWinningMove] = 2;
                moveMade = true;
                break;
            }
        }
        if (!moveMade) {
            if (board[4] == 0) board[4] = 2; // Choose the center.
            else if (handleEdgeCase(board) > -1) board[handleEdgeCase(board)] = 2; // Handle special cases.
            else if (getRandomAvailableSpace(board, cornerPositions) != -1) board[getRandomAvailableSpace(board, cornerPositions)] = 2; // Choose a corner.
            else board[getRandomAvailableSpace(board, sidePositions)] = 2; // Choose a side.
        }

        // Print the board to the console.
        printBoard(board);

        // Check if the game is over.
        if (isGameOver(board)) break;
    }
    return 0;
}
